{
  "leet": {
    "prefix": "leet",
    "body": [
      "=begin",
      "Restate:",
      "\t\t${0}",
      "Output:",
      "\t\t",
      "Constraints:",
      "\t\t",
      "Input:",
      "\t\t",
      "Brute Force:",
      "\t\t",
      "Optimization 1:",
      "\t\t",
      "Examples:",
      "\t\t",
      "=end",
      ""
    ],
    "description": "Problem Solving Template (Leetcode)"
  },
  "active_model": {
    "prefix": "active_model",
    "body": [
      "include ActiveModel::Model",
      "attr_accessor :${1}",
      "def call",
      "return unless valid?",
      "",
      "# TODO: Implement",
      "some_action",
      "end",
      "private"
    ],
    "description": "Active model class body"
  },
  "rspec_is_expected": {
    "prefix": "itie",
    "body": "it { is_expected.to ${1:matcher} }$0",
    "description": "RSpec supports a one-liner syntax for setting an expectation on the subject"
  },
  "rspec_context_it_is_expected": {
    "prefix": "conte",
    "body": [
      "context \"${1:message}\" do",
      "it { is_expected.to ${2:matcher} }",
      "end",
      "$0"
    ],
    "description": "RSpec context with one-liner syntax for setting an expectation on the subject"
  },
  "rspec_context_it": {
    "prefix": "conti",
    "body": [
      "context \"${1:message}\" do",
      "it \"${2}\"",
      "end",
      "$0"
    ],
    "description": "RSpec context with one-liner syntax for setting an expectation on the subject"
  },
  "rspec_let_create": {
    "prefix": "letcr",
    "body": "let(:${1}) { create(:${1}${2}) }${0}",
    "description": "RSpec create a record in let block"
  }
}
